name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-image:
    name: 'Build image'
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    outputs:
      image: ${{ steps.build.outputs.imageid }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4.1.1

      - name: 'Set up Docker Build'
        uses: docker/setup-buildx-action@v3.0.0

      - name: 'Build image'
        id: build
        uses: docker/build-push-action@v5.1.0
        with:
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha,ignore-error=true
          cache-to: type=gha,mode=max,ignore-error=true
          target: prod

      - name: 'Upload build'
        uses: actions/upload-artifact@v3.1.3
        with:
          name: image
          path: /tmp/image.tar

  format:
    name: 'Format'
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4.1.1

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4.0.0
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run formatter'
        run: npx prettier --ignore-unknown --check '**'

  lint:
    name: 'Lint'
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4.1.1

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4.0.0
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run the linter'
        run: npx eslint . --max-warnings 0

  test-smoke:
    name: 'Smoke test'
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs:
      - build-image

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - '6379:6379'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4.1.1

      - name: 'Download image'
        uses: actions/download-artifact@v3.0.2
        with:
          name: image
          path: /tmp

      - name: 'Load image'
        run: docker load --input /tmp/image.tar

      - name: 'Run smoke test'
        run: scripts/smoke-test.sh ${{ needs.build-image.outputs.image }}
        env:
          REDIS_PORT: 6379

  typecheck:
    name: 'Typecheck'
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4.1.1

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4.0.0
        with:
          node-version-file: package.json
          cache: ${{ !env.ACT && 'npm' || '' }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run typechecker'
        run: npx tsc --noEmit
